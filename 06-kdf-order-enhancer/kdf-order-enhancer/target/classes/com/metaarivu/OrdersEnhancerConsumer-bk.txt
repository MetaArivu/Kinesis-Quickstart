package com.metaarivu;

import java.io.IOException;

import org.apache.http.protocol.ResponseDate;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.KinesisFirehoseEvent;
import com.amazonaws.services.lambda.runtime.events.KinesisFirehoseEvent.Record;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.metaarivu.model.Order;
import com.metaarivu.model.ResonseData;

public class OrdersEnhancerConsumer implements RequestHandler<KinesisFirehoseEvent, String> {

	@Override
	public String handleRequest(KinesisFirehoseEvent event, Context context) {
		LambdaLogger logger = context.getLogger();

		logger.log("<=****2.2*****=>Kinesis Java Lambda Consumer Invoked: records = " + event.getRecords());

		Order order = null;
		String id = null;
		if (event != null) {
			for (Record rec : event.getRecords()) {

				logger.log("Processed order array: " + rec.getData().array());
				logger.log("Record Metadata= " + rec.getKinesisRecordMetadata());

				id = rec.getRecordId();
				try {
					order = new ObjectMapper().readValue(rec.getData().array(), Order.class);

					logger.log("Order Data=" + order.toJSON());
					// return json;
				} catch (JsonParseException e) {

					e.printStackTrace();
				} catch (JsonMappingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

		logger.log("Final Order Data=" + order);
		String data = null;
		if (order != null) {

			data = new ResonseData(id, "Ok", order).toJSON();
		} else {
			data = new ResonseData(id, "Dropped", "").toJSON();
		}
		logger.log("<====>Return Order Data=" + data);

		return data;
	}

}
