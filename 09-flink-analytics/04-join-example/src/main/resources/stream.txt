package com.metaarivu;

import org.apache.flink.api.common.functions.JoinFunction;
import org.apache.flink.api.common.functions.MapFunction;
import org.apache.flink.api.common.typeinfo.TypeHint;
import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.api.java.functions.KeySelector;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.api.java.tuple.Tuple3;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.windowing.assigners.TumblingProcessingTimeWindows;
import org.apache.flink.streaming.api.windowing.time.Time;

@SuppressWarnings(value = { "deprecation", "serial" })
public class JoinExample {

	public static void main(String[] args) throws Exception {

		System.out.println("Starting Join Data Stream V21==>");

		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

		DataStream<Tuple2<String, String>> orderStream = env.socketTextStream("localhost", 9991)
				.map(new MapFunction<String, Tuple2<String, String>>() {
					public Tuple2<String, String> map(String value) {
						Order ord = new Order(value);
						return new Tuple2<String, String>(ord.getPrdId().trim().toUpperCase(), value);
					}
				});
		
		orderStream.print();
		
		DataStream<Tuple2<String, String>> productStream = env.socketTextStream("localhost", 9992)
				.map(new MapFunction<String, Tuple2<String, String>>() {
					public Tuple2<String, String> map(String value) {
						Product prd = new Product(value);
						return new Tuple2<String, String>(prd.getPrdId().trim().toUpperCase(), value);
					}
				});

		productStream.print();

		DataStream<Tuple3<String, String, String>> ordPrdStream = 
		orderStream.join(productStream)
				.where(ord -> ord.f0)
				.equalTo( prd -> prd.f0)
				.window(TumblingProcessingTimeWindows.of(Time.milliseconds(10)))
				.apply(new JoinFunction<Tuple2<String, String>, Tuple2<String, String>, Tuple3<String, String, String>>() {
					@Override
					public Tuple3<String, String, String> join(Tuple2<String, String> order, Tuple2<String, String> product)
							throws Exception {
						System.out.println(order);
						System.out.println(product);
						System.out.println("====");
						return new Tuple3<String, String,String>(order.f0, order.f1,product.f1);
					}
				});

		ordPrdStream.print();
		
		env.execute("Join Stream Example");
	}

}package com.metaarivu;

import org.apache.flink.api.common.functions.JoinFunction;
import org.apache.flink.api.common.functions.MapFunction;
import org.apache.flink.api.common.typeinfo.TypeHint;
import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.api.java.functions.KeySelector;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.api.java.tuple.Tuple3;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.windowing.assigners.TumblingProcessingTimeWindows;
import org.apache.flink.streaming.api.windowing.time.Time;

@SuppressWarnings(value = { "deprecation", "serial" })
public class JoinExample {

	public static void main(String[] args) throws Exception {

		System.out.println("Starting Join Data Stream V21==>");

		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

		DataStream<Tuple2<String, String>> orderStream = env.socketTextStream("localhost", 9991)
				.map(new MapFunction<String, Tuple2<String, String>>() {
					public Tuple2<String, String> map(String value) {
						Order ord = new Order(value);
						return new Tuple2<String, String>(ord.getPrdId().trim().toUpperCase(), value);
					}
				});
		
		orderStream.print();
		
		DataStream<Tuple2<String, String>> productStream = env.socketTextStream("localhost", 9992)
				.map(new MapFunction<String, Tuple2<String, String>>() {
					public Tuple2<String, String> map(String value) {
						Product prd = new Product(value);
						return new Tuple2<String, String>(prd.getPrdId().trim().toUpperCase(), value);
					}
				});

		productStream.print();

		DataStream<Tuple3<String, String, String>> ordPrdStream = 
		orderStream.join(productStream)
				.where(ord -> ord.f0)
				.equalTo( prd -> prd.f0)
				.window(TumblingProcessingTimeWindows.of(Time.milliseconds(10)))
				.apply(new JoinFunction<Tuple2<String, String>, Tuple2<String, String>, Tuple3<String, String, String>>() {
					@Override
					public Tuple3<String, String, String> join(Tuple2<String, String> order, Tuple2<String, String> product)
							throws Exception {
						System.out.println(order);
						System.out.println(product);
						System.out.println("====");
						return new Tuple3<String, String,String>(order.f0, order.f1,product.f1);
					}
				});

		ordPrdStream.print();
		
		env.execute("Join Stream Example");
	}

}